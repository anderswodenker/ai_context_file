# ai-context.yaml: Project-specific context for AI tools

# 1. Project Information
# General details about the project.
project_info:
  name: "Awesome Web App"
  description: "A web application that does awesome things. Built with Python and Flask."
  version: "1.2.0"
  license: "MIT"
  style_guide: "Follow PEP 8 for Python and Google's HTML/CSS style guide."

# 2. Profiles
# Role-specific instructions for the AI.
profiles:
  default:
    prompt_header: "You are a helpful AI assistant for the 'Awesome Web App' project."
    persona: "A senior software engineer with expertise in Python and Flask."
    constraints:
      - "Do not suggest solutions that require adding new dependencies without approval."
      - "Ensure all code is well-documented and includes type hints."

  code_review:
    prompt_header: "You are an AI code reviewer for the 'Awesome Web App' project."
    persona: "A meticulous code reviewer focused on quality, performance, and security."
    constraints:
      - "Focus on identifying potential bugs, security vulnerabilities, and performance bottlenecks."
      - "Check for adherence to the project's style guide."
      - "Provide constructive feedback and code examples where appropriate."

  documentation:
    prompt_header: "You are an AI technical writer for the 'Awesome Web App' project."
    persona: "A clear and concise technical writer."
    constraints:
      - "Write documentation in Markdown."
      - "Assume the audience is a developer with intermediate experience."
      - "Use the glossary to ensure consistent terminology."

# 3. Glossary
# Definitions of project-specific terms.
glossary:
  - term: "Awesome Object"
    definition: "A core data structure in the application that represents a user-created object."
  - term: "Widget"
    definition: "A reusable UI component."

# 4. File References
# Important files or directories the AI should be aware of.
file_references:
  - path: "src/app.py"
    description: "The main application file."
  - path: "src/models.py"
    description: "Defines the database models."
  - path: "tests/"
    description: "Directory containing all project tests."

# 5. Examples
# Concrete examples of inputs and outputs.
examples:
  - name: "Creating an Awesome Object"
    input: |
      POST /api/awesome-objects
      {
        "name": "My Awesome Object",
        "value": 42
      }
    output: |
      HTTP/1.1 201 Created
      {
        "id": 123,
        "name": "My Awesome Object",
        "value": 42
      }
